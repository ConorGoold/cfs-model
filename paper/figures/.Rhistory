)
# fit the model
fit_uk_pork_model <- rstan::sampling(
object = cipd_model,
data = stan_data,
init = 0,
cores = 4, chains = 4, warmup = 500, iter = 1000,
control = list(max_treedepth=10)
)
print(fit_uk_pork_model, pars=c("a", "e_", "f", "k", "h", "w", "m","r","q","s","critical_ratio"),
digits_summary = 4, probs=c(0.025, 0.975)
)
draws <- as.data.frame(fit_uk_pork_model)
n_draws <- nrow(draws)
plot(density(draws$k))
# posterior predictions
n_samples <- 200
sample_draws <- sample(1:n_draws, n_samples, replace=F)
states_init <- draws[ , grep("initial", colnames(draws))]
states_draws <- draws[ , grep("states", colnames(draws))][,-c(1:4)]
state_variables_plot <- apply(state_variables, 2, function(x) ifelse(x==-100, NA, x))
n_t <- nrow(d_monthly_uk_pork)
n=1
the_states <- cbind(states_init[,n], states_draws[ , ( ((n-1)*(n_t)+1):(n_t*n))])
initial <- NA
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16, type = "b")
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
n=2
the_states <- cbind(states_init[,n], states_draws[ , ( ((n-1)*(n_t)+1):(n_t*n))])
initial <- NA
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16, type = "b")
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
n=4
the_states <- cbind(states_init[,n], states_draws[ , ( ((n-1)*(n_t)+1):(n_t*n))])
initial <- NA
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16, type = "b")
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
states_bh <- cbind(states_init[,1], states_draws[ , ( ((1-1)*(n_t)+1):(n_t))])
plot(c(NA, d_monthly_uk_pork$UK_production_kg), type="b", cex=0.5,
ylim=c(min(na.omit(d_monthly_uk_pork$UK_production_kg)) * 0.95 , max(na.omit(d_monthly_uk_pork$UK_production_kg)) * 1.05 )
)
for(i in 1:n_samples){
lines(1:(n_t+1), states_bh[sample_draws[i], ] * draws[sample_draws[i], "p[4]"] * draws[sample_draws[i], "p[5]"],
col = scales::alpha("black", 0.2), lwd=0.5)
}
plot(c(NA, d_monthly_uk_pork$imports_kg - d_monthly_uk_pork$exports_kg), type="b", cex=0.5)
for(i in 1:n_samples){
lines(1:(n_t+1),
draws[sample_draws[i], "p[6]"] * (
draws[sample_draws[i], "p[7]"] - states_bh[sample_draws[i], ] * draws[sample_draws[i], "p[4]"] * draws[sample_draws[i], "p[5]"]
),
col = scales::alpha("black", 0.2), lwd=0.5)
}
state_variables <- with(d_monthly_uk_pork,
cbind( breeding_herd_head, NA, total_supply_kg, all_pig_price_p_kg)
)
state_variables <- apply(state_variables, 2, function(x) ifelse( is.na(x), -100, x))
stan_data <- list(
n_t = nrow(state_variables),
ts = 1:nrow(state_variables),
n_states = 4,
n_parameters = 12,
y = state_variables,
uk_production = d_monthly_uk_pork$UK_production_kg,
trade = d_monthly_uk_pork$imports_kg - d_monthly_uk_pork$exports_kg,
imports = d_monthly_uk_pork$imports_kg,
exports = d_monthly_uk_pork$exports_kg,
prior_only = 0
)
state_variables <- with(d_monthly_uk_pork,
cbind( breeding_herd_head, NA, total_supply_kg, all_pig_price_p_kg)
)
state_variables <- apply(state_variables, 2, function(x) ifelse( is.na(x), -100, x))
stan_data <- list(
n_t = nrow(state_variables),
ts = 1:nrow(state_variables),
n_states = 4,
n_parameters = 12,
y = state_variables,
uk_production = d_monthly_uk_pork$UK_production_kg,
trade = d_monthly_uk_pork$imports_kg - d_monthly_uk_pork$exports_kg,
imports = d_monthly_uk_pork$imports_kg,
exports = d_monthly_uk_pork$exports_kg,
prior_only = 0
)
# compile the model
cipd_model <- rstan::stan_model("~/Documents/cidp-uk-pork-monthly-test.stan")
# fit the model
fit_uk_pork_model <- rstan::sampling(
object = cipd_model,
data = stan_data,
init = 0,
cores = 4, chains = 4, warmup = 500, iter = 1000,
control = list(max_treedepth=10)
)
print(fit_uk_pork_model, pars=c("a", "e_", "f", "k", "h", "w", "m","r","q","s","critical_ratio"),
digits_summary = 4, probs=c(0.025, 0.975)
)
draws <- as.data.frame(fit_uk_pork_model)
n_draws <- nrow(draws)
# posterior predictions
n_samples <- 200
sample_draws <- sample(1:n_draws, n_samples, replace=F)
states_init <- draws[ , grep("initial", colnames(draws))]
states_draws <- draws[ , grep("states", colnames(draws))][,-c(1:4)]
state_variables_plot <- apply(state_variables, 2, function(x) ifelse(x==-100, NA, x))
n_t <- nrow(d_monthly_uk_pork)
n=1
the_states <- cbind(states_init[,n], states_draws[ , ( ((n-1)*(n_t)+1):(n_t*n))])
initial <- NA
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16, type = "b")
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
n=3
the_states <- cbind(states_init[,n], states_draws[ , ( ((n-1)*(n_t)+1):(n_t*n))])
initial <- NA
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16, type = "b")
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
n=4
the_states <- cbind(states_init[,n], states_draws[ , ( ((n-1)*(n_t)+1):(n_t*n))])
initial <- NA
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16, type = "b")
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
states_bh <- cbind(states_init[,1], states_draws[ , ( ((1-1)*(n_t)+1):(n_t))])
plot(c(NA, d_monthly_uk_pork$UK_production_kg), type="b", cex=0.5,
ylim=c(min(na.omit(d_monthly_uk_pork$UK_production_kg)) * 0.95 , max(na.omit(d_monthly_uk_pork$UK_production_kg)) * 1.05 )
)
for(i in 1:n_samples){
lines(1:(n_t+1), states_bh[sample_draws[i], ] * draws[sample_draws[i], "p[4]"] * draws[sample_draws[i], "p[5]"],
col = scales::alpha("black", 0.2), lwd=0.5)
}
plot(c(NA, d_monthly_uk_pork$imports_kg - d_monthly_uk_pork$exports_kg), type="b", cex=0.5)
for(i in 1:n_samples){
lines(1:(n_t+1),
draws[sample_draws[i], "p[6]"] * (
draws[sample_draws[i], "p[7]"] - states_bh[sample_draws[i], ] * draws[sample_draws[i], "p[4]"] * draws[sample_draws[i], "p[5]"]
),
col = scales::alpha("black", 0.2), lwd=0.5)
}
# compile the model
cipd_model <- rstan::stan_model("~/Documents/cidp-uk-pork-monthly-test.stan")
# fit the model
fit_uk_pork_model <- rstan::sampling(
object = cipd_model,
data = stan_data,
init = 0,
cores = 4, chains = 4, warmup = 500, iter = 1000,
control = list(max_treedepth=10)
)
print(fit_uk_pork_model, pars=c("a", "e_", "f", "k", "h", "w", "m","r","q","s","critical_ratio"),
digits_summary = 4, probs=c(0.025, 0.975)
)
draws <- as.data.frame(fit_uk_pork_model)
n_draws <- nrow(draws)
# posterior predictions
n_samples <- 200
sample_draws <- sample(1:n_draws, n_samples, replace=F)
states_init <- draws[ , grep("initial", colnames(draws))]
states_draws <- draws[ , grep("states", colnames(draws))][,-c(1:4)]
state_variables_plot <- apply(state_variables, 2, function(x) ifelse(x==-100, NA, x))
n_t <- nrow(d_monthly_uk_pork)
n=1
the_states <- cbind(states_init[,n], states_draws[ , ( ((n-1)*(n_t)+1):(n_t*n))])
initial <- NA
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16, type = "b")
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
lines(1:(n_t+1), apply(the_states, 2, mean),
col = scales::alpha("black", 0.2), lwd=3)
lines(1:(n_t+1), apply(the_states, 2, mean),
col = scales::alpha("black", 1), lwd=3)
n=4
n=3
the_states <- cbind(states_init[,n], states_draws[ , ( ((n-1)*(n_t)+1):(n_t*n))])
initial <- NA
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16, type = "b")
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
lines(1:(n_t+1), apply(the_states, 2, mean),
col = scales::alpha("black", 1), lwd=3)
n=4
the_states <- cbind(states_init[,n], states_draws[ , ( ((n-1)*(n_t)+1):(n_t*n))])
initial <- NA
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16, type = "b")
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
lines(1:(n_t+1), apply(the_states, 2, mean),
col = scales::alpha("black", 1), lwd=3)
states_bh <- cbind(states_init[,1], states_draws[ , ( ((1-1)*(n_t)+1):(n_t))])
plot(c(NA, d_monthly_uk_pork$UK_production_kg), type="b", cex=0.5,
ylim=c(min(na.omit(d_monthly_uk_pork$UK_production_kg)) * 0.95 , max(na.omit(d_monthly_uk_pork$UK_production_kg)) * 1.05 )
)
for(i in 1:n_samples){
lines(1:(n_t+1), states_bh[sample_draws[i], ] * draws[sample_draws[i], "p[4]"] * draws[sample_draws[i], "p[5]"],
col = scales::alpha("black", 0.2), lwd=0.5)
}
lines(1:(n_t+1), apply( prod(states_bh, draws$`p[4]` * draws$`p[5]`), 2, mean),
col = scales::alpha("black", 1), lwd=3)
states_bh
apply( prod(states_bh, draws$`p[4]`, draws$`p[5]`), 2, mean)
draws$`p[4]`
draws$`p[5]`
prod(states_bh, draws$`p[4]`, draws$`p[5]`)
states_bh * draws$`p[4]` * draws$`p[5]`
lines(1:(n_t+1), apply( states_bh * draws$`p[4]` * draws$`p[5]`, 2, mean),
col = scales::alpha("black", 1), lwd=3)
plot(c(NA, d_monthly_uk_pork$imports_kg), type="b", cex=0.5)
for(i in 1:n_samples){
lines(1:(n_t+1),
draws[sample_draws[i], "p[6]"] * draws[sample_draws[i], "p[7]"],
col = scales::alpha("black", 0.2), lwd=0.5)
}
plot(c(NA, d_monthly_uk_pork$imports_kg), type="b", cex=0.5)
for(i in 1:n_samples){
lines(1:(n_t+1), draws[sample_draws[i], "p[6]"] * draws[sample_draws[i], "p[7]"],
col = scales::alpha("black", 0.2), lwd=0.5)
}
plot(c(NA, d_monthly_uk_pork$imports_kg), type="b", cex=0.5)
for(i in 1:n_samples){
lines(1:(n_t+1), c(NA, draws[sample_draws[i], "p[6]"] * draws[sample_draws[i], "p[7]"]),
col = scales::alpha("black", 0.2), lwd=0.5)
}
for(i in 1:n_samples){
lines(1:(n_t+1), rep(draws[sample_draws[i], "p[6]"] * draws[sample_draws[i], "p[7]"], n_t+1),
col = scales::alpha("black", 0.2), lwd=0.5)
}
plot(c(NA, d_monthly_uk_pork$imports_kg - d_monthly_uk_pork$exports_kg), type="b", cex=0.5)
for(i in 1:n_samples){
lines(1:(n_t+1),
draws[sample_draws[i], "p[6]"] * (
draws[sample_draws[i], "p[7]"] - states_bh[sample_draws[i], ] * draws[sample_draws[i], "p[4]"] * draws[sample_draws[i], "p[5]"]
),
col = scales::alpha("black", 0.2), lwd=0.5)
}
?rstan::sampling
# fit the model
fit_uk_pork_model <- rstan::sampling(
object = cipd_model,
data = stan_data,
init = 0,
cores = 4, chains = 4, warmup = 500, iter = 1000,
control = list(max_treedepth=10, adapt_delta=0.85),
sample_file = "~/Dropbox/Leeds_postdoc/Papers/cfs-model/code/R/Stan-MCMC-results.csv",
diagnostic_file = "~/Dropbox/Leeds_postdoc/Papers/cfs-model/code/R/Stan-MCMC-diagnostics.csv"
)
get_wd
get_wd()
getwd()
print(fit_uk_pork_model, pars=c("a", "e_", "f", "k", "h", "w", "m","r","q","s","critical_ratio"),
digits_summary = 4, probs=c(0.025, 0.975)
)
rstan::stan_diag(fit_uk_pork_model)
rstan::check_divergences(fit_uk_pork_model)
rstan::check_hmc_diagnostics(fit_uk_pork_model)
fit_uk_pork_model <- rstan::sampling(
object = cipd_model,
data = stan_data,
init = 0,
cores = 4, chains = 4, warmup = 500, iter = 1000,
seed = 2020,
control = list(max_treedepth=10, adapt_delta=0.85)
)
capture.output(rstan::check_hmc_diagnostics(fit_uk_pork_model), file = "Stan-MCMC-diagnostics.csv")
draws <- as.data.frame(fit_uk_pork_model)
write.csv(draws, file = "Stan-MCMC-results.csv", row.names = FALSE)
fit_uk_pork_model <- rstan::sampling(
object = cipd_model,
data = stan_data,
init = 0,
cores = 4, chains = 4, warmup = 500, iter = 1000,
seed = 2020,
control = list(max_treedepth=10, adapt_delta=0.95)
)
capture.output(rstan::check_hmc_diagnostics(fit_uk_pork_model),
file = "~/Dropbox/Leeds_postdoc/Papers/cfs-model/code/R/Stan-MCMC-diagnostics.csv")
draws <- as.data.frame(fit_uk_pork_model)
write.csv(draws, file = "~/Dropbox/Leeds_postdoc/Papers/cfs-model/code/R/Stan-MCMC-results.csv", row.names = FALSE)
print(fit_uk_pork_model, pars=c("a", "e_", "f", "k", "h", "w", "m","r","q","s","critical_ratio"),
digits_summary = 4, probs=c(0.025, 0.975)
)
print(fit_uk_pork_model, pars=c("p", "a", "e_", "f", "k", "h", "w", "m","r","q","s","critical_ratio",
"sigma", "sigma_trade", "sigma_production"),
digits_summary = 4, probs=c(0.025, 0.975)
)
print(fit_uk_pork_model, pars=c("p", "a", "e_", "f", "k", "h", "w", "m","r","q","s","critical_ratio",
"states_init",
"sigma", "sigma_trade", "sigma_production"),
digits_summary = 4, probs=c(0.025, 0.975)
)
draws <- read.csv("~/Dropbox/Leeds_postdoc/Papers/cfs-model/code/R/Stan-MCMC-results.csv")
mean(draws$critical_ratio)
rethinking::HPDI(draws$critical_ratio)
rethinking::HPDI(draws$k)
rethinking::HPDI(draws$kappa)
# fit the model
fit_uk_pork_model <- rstan::sampling(
object = cipd_model,
data = stan_data,
init = 0,
cores = 4, chains = 4, warmup = 2500, iter = 5000,
seed = 2020,
control = list(max_treedepth=10, adapt_delta=0.95)
)
capture.output(rstan::check_hmc_diagnostics(fit_uk_pork_model),
file = "~/Dropbox/Leeds_postdoc/Papers/cfs-model/code/R/Stan-MCMC-diagnostics.csv")
draws <- as.data.frame(fit_uk_pork_model)
write.csv(draws, file = "~/Dropbox/Leeds_postdoc/Papers/cfs-model/code/R/Stan-MCMC-results.csv", row.names = FALSE)
capture.output(
print(fit_uk_pork_model, pars=c("p", "a", "e_", "f", "k", "h", "w", "m","r","q","s","critical_ratio",
"states_init",
"sigma", "sigma_trade", "sigma_production"),
digits_summary = 4, probs=c(0.025, 0.975)
),
file =  "~/Dropbox/Leeds_postdoc/Papers/cfs-model/code/R/Stan-MCMC-summary.csv"
)
print(fit_uk_pork_model, pars=c("p", "a", "e_", "f", "k", "h", "w", "m","r","q","s","critical_ratio",
"states_init",
"sigma", "sigma_trade", "sigma_production"),
digits_summary = 4, probs=c(0.025, 0.975)
)
fit_uk_pork_model <- rstan::sampling(
object = cipd_model,
data = stan_data,
init = 0,
cores = 4, chains = 4, warmup = 2500, iter = 5000,
seed = 2020,
control = list(max_treedepth=10, adapt_delta=0.99)
)
capture.output(rstan::check_hmc_diagnostics(fit_uk_pork_model),
file = "~/Dropbox/Leeds_postdoc/Papers/cfs-model/code/R/Stan-MCMC-diagnostics.csv")
draws <- as.data.frame(fit_uk_pork_model)
write.csv(draws, file = "~/Dropbox/Leeds_postdoc/Papers/cfs-model/code/R/Stan-MCMC-results.csv", row.names = FALSE)
capture.output(
print(fit_uk_pork_model, pars=c("p", "a", "e_", "f", "k", "h", "w", "m","r","q","s","critical_ratio",
"states_init",
"sigma", "sigma_trade", "sigma_production"),
digits_summary = 4, probs=c(0.025, 0.975)
),
file =  "~/Dropbox/Leeds_postdoc/Papers/cfs-model/code/R/Stan-MCMC-summary.csv"
)
print(fit_uk_pork_model, pars=c("p", "a", "e_", "f", "k", "h", "w", "m","r","q","s","critical_ratio",
"states_init",
"sigma", "sigma_trade", "sigma_production"),
digits_summary = 4, probs=c(0.025, 0.975)
)
draws <- as.data.frame(fit_uk_pork_model)
n_draws <- nrow(draws)
# posterior predictions
n_samples <- 200
sample_draws <- sample(1:n_draws, n_samples, replace=F)
states_init <- draws[ , grep("initial", colnames(draws))]
states_draws <- draws[ , grep("states", colnames(draws))][,-c(1:4)]
state_variables_plot <- apply(state_variables, 2, function(x) ifelse(x==-100, NA, x))
n_t <- nrow(d_monthly_uk_pork)
n=4
the_states <- cbind(states_init[,n], states_draws[ , ( ((n-1)*(n_t)+1):(n_t*n))])
initial <- NA
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16, type = "b")
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16)
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
lines(1:(n_t+1), apply(the_states, 2, mean),
col = scales::alpha("black", 1), lwd=3)
n=3
the_states <- cbind(states_init[,n], states_draws[ , ( ((n-1)*(n_t)+1):(n_t*n))])
initial <- NA
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16)
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
lines(1:(n_t+1), apply(the_states, 2, mean),
col = scales::alpha("black", 1), lwd=3)
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16, type="b")
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
lines(1:(n_t+1), apply(the_states, 2, mean),
col = scales::alpha("black", 1), lwd=3)
n=1
the_states <- cbind(states_init[,n], states_draws[ , ( ((n-1)*(n_t)+1):(n_t*n))])
initial <- NA
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.95 , max(na.omit(state_variables_plot[,n])) * 1.05 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16, type="b")
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
plot(c(initial, state_variables_plot[,n]), type="n",
ylim=c(min(na.omit(state_variables_plot[,n])) * 0.9 , max(na.omit(state_variables_plot[,n])) * 1.1 )
)
points(c(initial, state_variables_plot[,n]), col=scales::alpha("slateblue",0.6), pch=16, type="b")
for(i in 1:n_samples){
lines(1:(n_t+1), the_states[sample_draws[i], ],
col = scales::alpha("black", 0.2), lwd=0.5)
}
states_bh <- cbind(states_init[,1], states_draws[ , ( ((1-1)*(n_t)+1):(n_t))])
plot(c(NA, d_monthly_uk_pork$UK_production_kg), type="b", cex=0.5,
ylim=c(min(na.omit(d_monthly_uk_pork$UK_production_kg)) * 0.95 , max(na.omit(d_monthly_uk_pork$UK_production_kg)) * 1.05 )
)
for(i in 1:n_samples){
lines(1:(n_t+1), states_bh[sample_draws[i], ] * draws[sample_draws[i], "p[4]"] * draws[sample_draws[i], "p[5]"],
col = scales::alpha("black", 0.2), lwd=0.5)
}
states_bh <- cbind(states_init[,1], states_draws[ , ( ((1-1)*(n_t)+1):(n_t))])
plot(c(NA, d_monthly_uk_pork$UK_production_kg), type="b", cex=0.5,
ylim=c(min(na.omit(d_monthly_uk_pork$UK_production_kg)) * 0.95 , max(na.omit(d_monthly_uk_pork$UK_production_kg)) * 1.05 )
, col = scales::alpha("slateblue",0.6), pch=16)
plot(c(NA, d_monthly_uk_pork$UK_production_kg), type="b",
ylim=c(min(na.omit(d_monthly_uk_pork$UK_production_kg)) * 0.95 , max(na.omit(d_monthly_uk_pork$UK_production_kg)) * 1.05 )
, col = scales::alpha("slateblue",0.6), pch=16)
for(i in 1:n_samples){
lines(1:(n_t+1), states_bh[sample_draws[i], ] * draws[sample_draws[i], "p[4]"] * draws[sample_draws[i], "p[5]"],
col = scales::alpha("black", 0.2), lwd=0.5)
}
lines(1:(n_t+1), apply( states_bh * draws$`p[4]` * draws$`p[5]`, 2, mean),
col = scales::alpha("black", 1), lwd=3)
plot(c(NA, d_monthly_uk_pork$imports_kg), type="b", col = scales::alpha("slateblue",0.6), pch=16)
plot(c(NA, d_monthly_uk_pork$imports_kg), type="b", col = scales::alpha("slateblue",0.6), pch=16)
for(i in 1:n_samples){
lines(1:(n_t+1),
draws[sample_draws[i], "p[6]"] *  draws[sample_draws[i], "p[7]"],
col = scales::alpha("black", 0.2), lwd=0.5)
}
plot(c(NA, d_monthly_uk_pork$imports_kg), type="b", col = scales::alpha("slateblue",0.6), pch=16)
for(i in 1:n_samples){
abline(draws[sample_draws[i], "p[6]"] *  draws[sample_draws[i], "p[7]"],
col = scales::alpha("black", 0.2), lwd=0.5)
}
abline(h=draws[sample_draws[i], "p[6]"] *  draws[sample_draws[i], "p[7]"],
col = scales::alpha("black", 0.2), lwd=0.5)
plot(c(NA, d_monthly_uk_pork$imports_kg), type="b", col = scales::alpha("slateblue",0.6), pch=16)
for(i in 1:n_samples){
abline(h=draws[sample_draws[i], "p[6]"] *  draws[sample_draws[i], "p[7]"],
col = scales::alpha("black", 0.2), lwd=0.5)
}
plot(c(NA, d_monthly_uk_pork$exports_kg), type="b", col = scales::alpha("slateblue",0.6), pch=16)
for(i in 1:n_samples){
lines(1:(n_t+1), draws[sample_draws[i], "p[6]"] * states_bh[sample_draws[i], ] * draws[sample_draws[i], "p[4]"] * draws[sample_draws[i], "p[5]"],
col = scales::alpha("black", 0.2), lwd=0.5)
}
